ggsave(paste("./results/",paste(plotTitle,".pdf",sep=""),sep=""), width=8, height=4)
print(df)
return(df)
}
generatePerImageTables <-function(dfs,titles){
imageCounts <- length(participantResponseFiles)
for(i in 1:imageCounts){
pointEstimateVector = c()
lowerBoundVector = c()
upperBoundVector = c()
scaleVector = c()
dflength <- length(dfs)
for(d in 1:dflength){
scaleVector <- append(scaleVector,titles[d])
df <- dfs[[d]]
pointEstimateVector <- append(pointEstimateVector,df$mean[df$image==i])
upperBoundVector <- append(upperBoundVector,df$upperBound_CI[df$image==i])
lowerBoundVector <- append(lowerBoundVector,df$lowerBound_CI[df$image==i])
}
df <- data.frame(scale=scaleVector,mean=pointEstimateVector,lowerBound_CI=lowerBoundVector,upperBound_CI=upperBoundVector)
plotTitle <- paste(paste("Image",i)," Ratings Per Scale")
barChart(df,df$scale ,nbTechs = dflength, ymin = 1, ymax = 7, "Image", "Average Ratings",plotTitle)
path<-paste("./results/",paste(plotTitle,".pdf",sep=""),sep="")
print(path)
ggsave(path, width=8, height=4)
}
}
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
scaleItems = c("enjoyable","likable","pleasing")
df3 <- calculateDrawResponseCIs(scaleItems)
cleanColnames <- function(data){
newNames <- gsub("^.+?\\.(.+?)\\..*$", "\\1", colnames(data))
return(newNames)
}
scaleItems = c("enjoyable","likable","pleasing")
df3 <- calculateDrawResponseCIs(scaleItems)
scaleItems = c("enjoyable","likable","pleasing")
df3 <- calculateDrawResponseCIs(scaleItems)
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
participantResponseFiles
participantResponseFiles
participantResponseFiles
source("CI-Functions.R")
participantResponseFiles <- list.files(path= "./data",pattern = "\\.csv$") #names correspond to images, one participant per row, one word per
print(participantResponseFiles)
print(participantResponseFiles)
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
scaleItems <- cleanColnames(data)
df31 <- calculateDrawResponseCIs(scaleItems)
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
scaleItems <- cleanColnames(data)
df31 <- calculateDrawResponseCIs(scaleItems)
source("03_EFA/CI-Functions.R")
participantResponseFiles <- list.files(path= "03_EFA/data",pattern = "\\.csv$") #names correspond to images, one participant per row, one word per
print(participantResponseFiles)
cleanColnames <- function(data){
newNames <- gsub("^.+?\\.(.+?)\\..*$", "\\1", colnames(data))
return(newNames)
}
barChart <- function(resultTable, techniques, nbTechs = -1, ymin, ymax, xAxisLabel = "I am the X axis", yAxisLabel = "I am the Y Label",plotTitle){
#tr <- t(resultTable)
if(nbTechs <= 0){
stop('Please give a positive number of Techniques, nbTechs');
}
tr <- as.data.frame(resultTable)
nbTechs <- nbTechs - 1 ; # seq will generate nb+1
#now need to calculate one number for the width of the interval
tr$CI2 <- tr$upperBound_CI - tr$mean
tr$CI1 <- tr$mean - tr$lowerBound_CI
#add a technique column
tr$technique <- factor(seq.int(0, nbTechs, 1));
breaks <- c(as.character(tr$technique));
print(tr)
g <- ggplot(tr, aes(x=technique, y=mean)) +
#   geom_bar(stat="identity",fill = I("#CCCCCC")) +
geom_errorbar(aes(ymin=mean-CI1, ymax=mean+CI2),
width=0,                    # Width of the error bars
size = 1.1
) +
#labs(title="Overall time per technique") +
labs(x = xAxisLabel, y = yAxisLabel) +
scale_y_continuous(limits = c(ymin,ymax),breaks=1:7) +
scale_x_discrete(name="",breaks,techniques)+
coord_flip() +
ggtitle(plotTitle) +
theme(panel.background = element_rect(fill = 'white', colour = 'white'),axis.title=element_text(size = rel(1.2), colour = "black"),axis.text=element_text(size = rel(1.2), colour = "black"),panel.grid.major = element_line(colour = "#DDDDDD"),panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank())+
geom_point(size=2, colour="black")         # dots
print(g)
}
calculateDrawResponseCIs <- function(scaleItems){
imageCount <- length(participantResponseFiles)
pointEstimateVector = c()
lowerBoundVector = c()
upperBoundVector = c()
imageVector = c()
for (image in 1:imageCount){
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[image]],sep=""), encoding="UTF-8")
terms <- cleanColnames(data)
colnames(data) <- terms
#exploratory trying to see what would happen if we had had a lot fewer participants
#data <- data[sample(nrow(data), 24), ]
data <- data[scaleItems]
means <- rowMeans(data)
imageVector <- append(imageVector,image)
ci <- bootstrapMeanCI(means)
pointEstimateVector <- append(pointEstimateVector,ci[1])
upperBoundVector <- append(upperBoundVector,ci[3])
lowerBoundVector <- append(lowerBoundVector,ci[2])
}
df <- data.frame(image=imageVector,mean=pointEstimateVector,lowerBound_CI=lowerBoundVector,upperBound_CI=upperBoundVector)
plotTitle <- paste(paste("Average Rating for the",length(scaleItems)),"item scale")
barChart(df,df$image ,nbTechs = 15, ymin = 1, ymax = 7, "Image", "Average Ratings",plotTitle)
ggsave(paste("./results/",paste(plotTitle,".pdf",sep=""),sep=""), width=8, height=4)
print(df)
return(df)
}
generatePerImageTables <-function(dfs,titles){
imageCounts <- length(participantResponseFiles)
for(i in 1:imageCounts){
pointEstimateVector = c()
lowerBoundVector = c()
upperBoundVector = c()
scaleVector = c()
dflength <- length(dfs)
for(d in 1:dflength){
scaleVector <- append(scaleVector,titles[d])
df <- dfs[[d]]
pointEstimateVector <- append(pointEstimateVector,df$mean[df$image==i])
upperBoundVector <- append(upperBoundVector,df$upperBound_CI[df$image==i])
lowerBoundVector <- append(lowerBoundVector,df$lowerBound_CI[df$image==i])
}
df <- data.frame(scale=scaleVector,mean=pointEstimateVector,lowerBound_CI=lowerBoundVector,upperBound_CI=upperBoundVector)
plotTitle <- paste(paste("Image",i)," Ratings Per Scale")
barChart(df,df$scale ,nbTechs = dflength, ymin = 1, ymax = 7, "Image", "Average Ratings",plotTitle)
path<-paste("./results/",paste(plotTitle,".pdf",sep=""),sep="")
print(path)
ggsave(path, width=8, height=4)
}
}
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
scaleItems <- cleanColnames(data)
df31 <- calculateDrawResponseCIs(scaleItems)
scaleItems = c("enjoyable","likable","pleasing")
df3 <- calculateDrawResponseCIs(scaleItems)
scaleItems = c("enjoyable","likable","pleasing","nice")
df4 <- calculateDrawResponseCIs(scaleItems)
scaleItems = c("enjoyable","likable","pleasing","nice","appealing")
df5 <- calculateDrawResponseCIs(scaleItems)
dfs <- list(df3,df4,df5,df31)
generatePerImageTables(list(df3,df4,df5,df31),c("3-Item","4-Item","5-Item","31-Item"))
# import library
library(lavaan) #CFA
library(ltm) # Cronbach's alpha
# import data
data <- read.csv("04_CFA/CFA-ValidatedSurveyResults+Demographics.csv" , encoding="UTF-8")
# import data
data <- read.csv("04_CFA/CFA-ValidatedSurveyResults+Demographics.csv" , encoding="UTF-8")
data
# split data
# results for Sunburst - our scale
data_sun <- data[, c('sunburst.enjoyable.', 'sunburst.likable.', 'sunburst.pleasing.', 'sunburst.nice.', 'sunburst.appealing.')]
# results for Sunburst - classic aesthetic for website scale
data_sun_ca <- data[, c('sunburst.aesthetic.', 'sunburst.pleasant.', 'sunburst.clear.', 'sunburst.clean.', 'sunburst.symmetric.')]
# results for Beamtree - our scale
data_beam <- data[, c('beamtree.enjoyable.', 'beamtree.likable.', 'beamtree.pleasing.', 'beamtree.nice.', 'beamtree.appealing.')]
# results for Beamtree - classic aesthetic for website scale
data_beam_ca <- data[, c('beamtree.aesthetic.', 'beamtree.pleasant.', 'beamtree.clear.', 'beamtree.clean.', 'beamtree.symmetric.')]
# results for Startree - our scale
data_star <- data[, c('startree.enjoyable.', 'startree.likable.', 'startree.pleasing.', 'startree.nice.', 'startree.appealing.')]
# results for Startree - classic aesthetic for website scale
data_star_ca <- data[, c('startree.aesthetic.', 'startree.pleasant.', 'startree.clear.', 'startree.clean.', 'startree.symmetric.')]
#Clean the column name function
cleanColnames <- function(data, visName){
# delete visName and . from column name of dataframe, only keep the terms as column name
names(data) <- sub(paste(visName, ".", sep =""), "", names(data))
names(data) <- sub("\\.", "", names(data))
return(data)
}
# Clean column names for all data
data_sun <- cleanColnames(data_sun, "sunburst")
data_sun_ca <- cleanColnames(data_sun_ca, "sunburst")
data_beam <- cleanColnames(data_beam, "beamtree")
data_beam_ca <- cleanColnames(data_beam_ca, "beamtree")
data_star <- cleanColnames(data_star, "startree")
data_star_ca <- cleanColnames(data_star_ca, "startree")
CFA <- function(data){
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data,std.lv = TRUE)
summary(fit, fit.measures=T, standardized=TRUE)
}
con_vali <- function(data1, data2){ # results of two scales you want to calculate correlation
cor.test(rowMeans(data1), rowMeans(data2), method = "pearson")
}
dis_vali <- function(data1){ # result of your scale
cor.test(rowMeans(data1), data$age , method = "pearson")
}
CFA(data_sun)
# import library
library(lavaan) #CFA
library(ltm) # Cronbach's alpha
# import data
data <- read.csv("04_CFA/CFA-ValidatedSurveyResults+Demographics.csv" , encoding="UTF-8")
data
# split data
# results for Sunburst - our scale
data_sun <- data[, c('sunburst.enjoyable.', 'sunburst.likable.', 'sunburst.pleasing.', 'sunburst.nice.', 'sunburst.appealing.')]
# results for Sunburst - classic aesthetic for website scale
data_sun_ca <- data[, c('sunburst.aesthetic.', 'sunburst.pleasant.', 'sunburst.clear.', 'sunburst.clean.', 'sunburst.symmetric.')]
# results for Beamtree - our scale
data_beam <- data[, c('beamtree.enjoyable.', 'beamtree.likable.', 'beamtree.pleasing.', 'beamtree.nice.', 'beamtree.appealing.')]
# results for Beamtree - classic aesthetic for website scale
data_beam_ca <- data[, c('beamtree.aesthetic.', 'beamtree.pleasant.', 'beamtree.clear.', 'beamtree.clean.', 'beamtree.symmetric.')]
# results for Startree - our scale
data_star <- data[, c('startree.enjoyable.', 'startree.likable.', 'startree.pleasing.', 'startree.nice.', 'startree.appealing.')]
# results for Startree - classic aesthetic for website scale
data_star_ca <- data[, c('startree.aesthetic.', 'startree.pleasant.', 'startree.clear.', 'startree.clean.', 'startree.symmetric.')]
#Clean the column name function
cleanColnames <- function(data, visName){
# delete visName and . from column name of dataframe, only keep the terms as column name
names(data) <- sub(paste(visName, ".", sep =""), "", names(data))
names(data) <- sub("\\.", "", names(data))
return(data)
}
# Clean column names for all data
data_sun <- cleanColnames(data_sun, "sunburst")
data_sun_ca <- cleanColnames(data_sun_ca, "sunburst")
data_beam <- cleanColnames(data_beam, "beamtree")
data_beam_ca <- cleanColnames(data_beam_ca, "beamtree")
data_star <- cleanColnames(data_star, "startree")
data_star_ca <- cleanColnames(data_star_ca, "startree")
CFA <- function(data){
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data,std.lv = TRUE)
pvalue <- fitMeasures(fit, "pvalue")
tli <- fitMeasures(fit, "tli")
cfi <- fitMeasures(fit, "cfi")
srmr <- fitMeasures(fit, "srmr")
rmsea <- fitMeasures(fit, "rmsea")
good_fit_list <- NULL
good_fit_list <- c(pvalue, tli, cfi, srmr, rmsea)
summary(fit, fit.measures=T, standardized=TRUE)
return(good_fit_list)
}
good_fit_sun <- CFA(data_sun)
good_fit_star <- CFA(data_star)
good_fit_beam <- CFA(data_beam)
good_fit_table <- c(good_fit_sun, good_fit_star, good_fit_beam)
good_fit_table
good_fit_sun <- CFA(data_sun)
good_fit_star <- CFA(data_star)
good_fit_beam <- CFA(data_beam)
good_fit_table <- c(good_fit_sun, good_fit_star, good_fit_beam)
good_fit_beam
good_fit_sun <- CFA(data_sun)
good_fit_star <- CFA(data_star)
good_fit_beam <- CFA(data_beam)
good_fit_table <- cbind(good_fit_sun, good_fit_star, good_fit_beam)
good_fit_sun <- CFA(data_sun)
good_fit_star <- CFA(data_star)
good_fit_beam <- CFA(data_beam)
good_fit_table <- cbind(good_fit_sun, good_fit_star, good_fit_beam)
good_fit_table
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
fitMeasures(fit)
# import data
data <- read.csv("/Volumes/GoogleDrive/My Drive/01 Validated Scale for Vis Design/VIS 2022 Submission/data and analysis code - for stamp/04_CFA/validation results + demographics - valid.csv" , encoding="UTF-8")
data
# import data
data <- read.csv("/Volumes/GoogleDrive/My Drive/01 Validated Scale for Vis Design/VIS 2022 Submission/data and analysis code - for stamp/04_CFA/validation results + demographics - valid.csv" , encoding="UTF-8")
data
# split data
# results for Sunburst - our scale
data_sun <- data[, c('sunburst.enjoyable.', 'sunburst.likable.', 'sunburst.pleasing.', 'sunburst.nice.', 'sunburst.appealing.')]
# results for Sunburst - classic aesthetic for website scale
data_sun_ca <- data[, c('sunburst.aesthetic.', 'sunburst.pleasant.', 'sunburst.clear.', 'sunburst.clean.', 'sunburst.symmetric.')]
# results for Beamtree - our scale
data_beam <- data[, c('beamtree.enjoyable.', 'beamtree.likable.', 'beamtree.pleasing.', 'beamtree.nice.', 'beamtree.appealing.')]
# results for Beamtree - classic aesthetic for website scale
data_beam_ca <- data[, c('beamtree.aesthetic.', 'beamtree.pleasant.', 'beamtree.clear.', 'beamtree.clean.', 'beamtree.symmetric.')]
# results for Startree - our scale
data_star <- data[, c('startree.enjoyable.', 'startree.likable.', 'startree.pleasing.', 'startree.nice.', 'startree.appealing.')]
# results for Startree - classic aesthetic for website scale
data_star_ca <- data[, c('startree.aesthetic.', 'startree.pleasant.', 'startree.clear.', 'startree.clean.', 'startree.symmetric.')]
#Clean the column name function
cleanColnames <- function(data, visName){
# delete visName and . from column name of dataframe, only keep the terms as column name
names(data) <- sub(paste(visName, ".", sep =""), "", names(data))
names(data) <- sub("\\.", "", names(data))
return(data)
}
# Clean column names for all data
data_sun <- cleanColnames(data_sun, "sunburst")
data_sun_ca <- cleanColnames(data_sun_ca, "sunburst")
data_beam <- cleanColnames(data_beam, "beamtree")
data_beam_ca <- cleanColnames(data_beam_ca, "beamtree")
data_star <- cleanColnames(data_star, "startree")
data_star_ca <- cleanColnames(data_star_ca, "startree")
CFA <- function(data){
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data,std.lv = TRUE)
pvalue <- fitMeasures(fit, "pvalue")
tli <- fitMeasures(fit, "tli")
cfi <- fitMeasures(fit, "cfi")
srmr <- fitMeasures(fit, "srmr")
rmsea <- fitMeasures(fit, "rmsea")
good_fit_list <- NULL
good_fit_list <- c(pvalue, tli, cfi, srmr, rmsea)
summary(fit, fit.measures=T, standardized=TRUE)
return(good_fit_list)
}
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
fitMeasures(fit)
good_fit_sun <- CFA(data_sun)
good_fit_star <- CFA(data_star)
good_fit_beam <- CFA(data_beam)
good_fit_table <- cbind(good_fit_sun, good_fit_star, good_fit_beam)
good_fit_table
# import data
data <- read.csv("/Volumes/GoogleDrive/My Drive/01 Validated Scale for Vis Design/VIS 2022 Submission/data and analysis code - for stamp/04_CFA/CFA-ValidatedSurveyResults+Demographics.csv" , encoding="UTF-8")
data
# split data
# results for Sunburst - our scale
data_sun <- data[, c('sunburst.enjoyable.', 'sunburst.likable.', 'sunburst.pleasing.', 'sunburst.nice.', 'sunburst.appealing.')]
# results for Sunburst - classic aesthetic for website scale
data_sun_ca <- data[, c('sunburst.aesthetic.', 'sunburst.pleasant.', 'sunburst.clear.', 'sunburst.clean.', 'sunburst.symmetric.')]
# results for Beamtree - our scale
data_beam <- data[, c('beamtree.enjoyable.', 'beamtree.likable.', 'beamtree.pleasing.', 'beamtree.nice.', 'beamtree.appealing.')]
# results for Beamtree - classic aesthetic for website scale
data_beam_ca <- data[, c('beamtree.aesthetic.', 'beamtree.pleasant.', 'beamtree.clear.', 'beamtree.clean.', 'beamtree.symmetric.')]
# results for Startree - our scale
data_star <- data[, c('startree.enjoyable.', 'startree.likable.', 'startree.pleasing.', 'startree.nice.', 'startree.appealing.')]
# results for Startree - classic aesthetic for website scale
data_star_ca <- data[, c('startree.aesthetic.', 'startree.pleasant.', 'startree.clear.', 'startree.clean.', 'startree.symmetric.')]
#Clean the column name function
cleanColnames <- function(data, visName){
# delete visName and . from column name of dataframe, only keep the terms as column name
names(data) <- sub(paste(visName, ".", sep =""), "", names(data))
names(data) <- sub("\\.", "", names(data))
return(data)
}
# Clean column names for all data
data_sun <- cleanColnames(data_sun, "sunburst")
data_sun_ca <- cleanColnames(data_sun_ca, "sunburst")
data_beam <- cleanColnames(data_beam, "beamtree")
data_beam_ca <- cleanColnames(data_beam_ca, "beamtree")
data_star <- cleanColnames(data_star, "startree")
data_star_ca <- cleanColnames(data_star_ca, "startree")
CFA <- function(data){
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data,std.lv = TRUE)
pvalue <- fitMeasures(fit, "pvalue")
tli <- fitMeasures(fit, "tli")
cfi <- fitMeasures(fit, "cfi")
srmr <- fitMeasures(fit, "srmr")
rmsea <- fitMeasures(fit, "rmsea")
good_fit_list <- NULL
good_fit_list <- c(pvalue, tli, cfi, srmr, rmsea)
summary(fit, fit.measures=T, standardized=TRUE)
return(good_fit_list)
}
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
fitMeasures(fit)
good_fit_sun <- CFA(data_sun)
good_fit_star <- CFA(data_star)
good_fit_beam <- CFA(data_beam)
good_fit_table <- cbind(good_fit_sun, good_fit_star, good_fit_beam)
good_fit_table
# import data
data <- read.csv("04_CFA/validation results + demographics - valid.csv" , encoding="UTF-8")
data
# split data
# results for Sunburst - our scale
data_sun <- data[, c('sunburst.enjoyable.', 'sunburst.likable.', 'sunburst.pleasing.', 'sunburst.nice.', 'sunburst.appealing.')]
# results for Sunburst - classic aesthetic for website scale
data_sun_ca <- data[, c('sunburst.aesthetic.', 'sunburst.pleasant.', 'sunburst.clear.', 'sunburst.clean.', 'sunburst.symmetric.')]
# results for Beamtree - our scale
data_beam <- data[, c('beamtree.enjoyable.', 'beamtree.likable.', 'beamtree.pleasing.', 'beamtree.nice.', 'beamtree.appealing.')]
# results for Beamtree - classic aesthetic for website scale
data_beam_ca <- data[, c('beamtree.aesthetic.', 'beamtree.pleasant.', 'beamtree.clear.', 'beamtree.clean.', 'beamtree.symmetric.')]
# results for Startree - our scale
data_star <- data[, c('startree.enjoyable.', 'startree.likable.', 'startree.pleasing.', 'startree.nice.', 'startree.appealing.')]
# results for Startree - classic aesthetic for website scale
data_star_ca <- data[, c('startree.aesthetic.', 'startree.pleasant.', 'startree.clear.', 'startree.clean.', 'startree.symmetric.')]
#Clean the column name function
cleanColnames <- function(data, visName){
# delete visName and . from column name of dataframe, only keep the terms as column name
names(data) <- sub(paste(visName, ".", sep =""), "", names(data))
names(data) <- sub("\\.", "", names(data))
return(data)
}
# Clean column names for all data
data_sun <- cleanColnames(data_sun, "sunburst")
data_sun_ca <- cleanColnames(data_sun_ca, "sunburst")
data_beam <- cleanColnames(data_beam, "beamtree")
data_beam_ca <- cleanColnames(data_beam_ca, "beamtree")
data_star <- cleanColnames(data_star, "startree")
data_star_ca <- cleanColnames(data_star_ca, "startree")
CFA <- function(data){
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data,std.lv = TRUE)
pvalue <- fitMeasures(fit, "pvalue")
tli <- fitMeasures(fit, "tli")
cfi <- fitMeasures(fit, "cfi")
srmr <- fitMeasures(fit, "srmr")
rmsea <- fitMeasures(fit, "rmsea")
good_fit_list <- NULL
good_fit_list <- c(pvalue, tli, cfi, srmr, rmsea)
summary(fit, fit.measures=T, standardized=TRUE)
return(good_fit_list)
}
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
fitMeasures(fit)
good_fit_sun <- CFA(data_sun)
good_fit_star <- CFA(data_star)
good_fit_beam <- CFA(data_beam)
good_fit_table <- cbind(good_fit_sun, good_fit_star, good_fit_beam)
good_fit_table
con_vali <- function(data1, data2){ # results of two scales you want to calculate correlation
cor.test(rowMeans(data1), rowMeans(data2), method = "pearson")
}
dis_vali <- function(data1){ # result of your scale
cor.test(rowMeans(data1), data$age , method = "pearson")
}
CFA(data_sun)
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
fitMeasures(fit$loadings)
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
fitMeasures(fit)
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
fitMeasures(fit, "std.all")
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
a <- fitMeasures(fit, "std.all")
a
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
a <- fitMeasures(fit, "std.all")
print(a)
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
a <- fitMeasures(fit, "std.all")
print(a)
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
a <- fitMeasures(fit, "std.all")
a.length
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
a <- fitMeasures(fit, "")
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
a <- fitMeasures(fit, "11")
a
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
a <- fit$loadings
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
lavInspect(fit, what = "std.all", add.labels = TRUE, add.class = TRUE,
list.by.group = TRUE,
drop.list.single.group = TRUE)
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit <- cfa(APV.model,data = data_sun,std.lv = TRUE)
lavInspect(fit, what = "std.all", add.labels = TRUE, add.class = TRUE,
list.by.group = TRUE,
drop.list.single.group = TRUE)[[1]]
APV.model ='aesthetic_pleasure =~ enjoyable + likable + pleasing + nice + appealing'
fit1 <- cfa(APV.model,data = data_sun,std.lv = TRUE)
l1 <- lavInspect(fit1, what = "std.all", add.labels = TRUE, add.class = TRUE,
list.by.group = TRUE,
drop.list.single.group = TRUE)[[1]]
fit2 <- cfa(APV.model,data = data_star,std.lv = TRUE)
l2 <- lavInspect(fit2, what = "std.all", add.labels = TRUE, add.class = TRUE,
list.by.group = TRUE,
drop.list.single.group = TRUE)[[1]]
tea <- cbind(l1, l2)
tea
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
parallel <- fa.parallel(correlation(1,data), n.obs=nrow(data), fa="fa", n.iter=100, main="Scree plots with parallel analysis")
library(png)
library(psych)
library(EFA.dimensions)
library(imager)
library(corrplot)
library(knitr)
library(kableExtra)
library(xtable)
library(dplyr)
library(tibble)
library(ggplot2)
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
parallel <- fa.parallel(correlation(1,data), n.obs=nrow(data), fa="fa", n.iter=100, main="Scree plots with parallel analysis")
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
parallel <- fa.parallel(cor(1,data), n.obs=nrow(data), fa="fa", n.iter=100, main="Scree plots with parallel analysis")
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
parallel <- fa.parallel(cor(data), n.obs=nrow(data), fa="fa", n.iter=100, main="Scree plots with parallel analysis")
nfact <- parallel.nfact
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
parallel <- fa.parallel(cor(data), n.obs=nrow(data), fa="fa", n.iter=100, main="Scree plots with parallel analysis")
nfact <- parallel$nfact
nfact
# DELETE!!!
data <- read.csv(paste("03_EFA/data/",participantResponseFiles[[1]],sep=""), encoding="UTF-8")
parallel <- fa.parallel(cor(data), n.obs=nrow(data), fa="fa", n.iter=100, main="Scree plots with parallel analysis")
parallel$nfact
